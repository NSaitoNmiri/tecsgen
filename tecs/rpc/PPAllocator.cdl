/*
 *  TECS Generator
 *      Generator for TOPPERS Embedded Component System
 *  
 *   Copyright (C) 2008-2013 by TOPPERS Project
 *--
 *   上記著作権者は，以下の(1)(4)の条件を満たす場合に限り，本ソフトウェ
 *   ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
 *   変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 *   (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
 *       権表示，この利用条件および下記の無保証規定が，そのままの形でソー
 *       スコード中に含まれていること．
 *   (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
 *       用できる形で再配布する場合には，再配布に伴うドキュメント（利用
 *       者マニュアルなど）に，上記の著作権表示，この利用条件および下記
 *       の無保証規定を掲載すること．
 *   (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
 *       用できない形で再配布する場合には，次のいずれかの条件を満たすこ
 *       と．
 *     (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
 *         作権表示，この利用条件および下記の無保証規定を掲載すること．
 *     (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
 *         報告すること．
 *   (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
 *       害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
 *       また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
 *       由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
 *       免責すること．
 *  
 *   本ソフトウェアは，無保証で提供されているものである．上記著作権者お
 *   よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
 *   に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
 *   アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
 *   の責任を負わない．
 *  
 *   $Id: PPAllocator.cdl 1925 2013-01-20 05:55:58Z okuma-top $
 */

/*
 * PPAlloc: Push Pop Allocator
 *
 * allocate した逆順で deallocate しなくてはならない
 * deallocate は、まとめて行うことができる
 * 例えば最初に allocate された領域を deallocate すると、すべての allocate された領域を deallocate したことになる
 * 排他制御していないため単一のタスクに割付けて使用する
 */

[deviate]   // alloc が逸脱になる
signature sPPAllocator {
	/*
	 * size で指定された大きさのメモリ領域をアロケートする
	 * メモリ領域が確保された場合 *ptr にメモリ領域のアドレスを格納して E_OK を返す
	 * 十分な空き領域がない場合 E_NOMEM を返す
	 */
	ER  alloc( [in]uint32_t size, [out]void **ptr );
	/*
	 * メモリをデアロケートする
	 * alloc で獲得したポインタを引き数 ptr に指定する
	 * alloc で獲得したメモリ領域を alloc したのとは逆順に dealloc しなくてはならない
	 * すべてを dealloc するには、最初に alloc されたメモリ領域を dealloc することで行うことができる
	 * alloc し獲得したメモリ領域をすべて dealloc する前に、再び alloc することはできる
	 * その場合でも、dealloc していないメモリ領域を alloc したのとは逆順に dealloc しなくてはならない
	 *
	 * ptr の値が buf <= ptr < buf+allocated_size を満たすかどうか検査される
	 * ptr の値が不正の場合 E_PAR を返す
	 */
	ER  dealloc( [in]const void *ptr );

    /*
	 * PPAllocator セルの割付け済みメモリをすべて解放する
	 * この関数は必ず成功する
	 */
    ER  dealloc_all(void);
};

celltype tPPAllocator {
	entry  sPPAllocator ePPAllocator;
	attr {
		uint32_t   heapSize;
	};
	var {
		[size_is(heapSize)]
			int8_t  *buf;
		uint32_t   allocatedSize;
	};
};

