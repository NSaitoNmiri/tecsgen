import_C( "tecs.h" );

struct tagST {
	int32_t  a;
};

signature sSig{
  void func( void );
  int32_t func2( [in]int32_t arg );
  struct tagST func3( [in]struct tagST a );
};

/*** 1.単一セル最適化 ***/
// 単一セル最適化 (VMT 不要最適化、スケルトン不要最適化を含む)
// 受け側のセルが一つで、ポートも一つだけ

celltype tSingleCellOptimizeCaller {
	[optional]	call sSig cCall;
	[optional]	call sSig cWhite[];
	[optional]	call sSig cBlack[];
	[optional]	call sSig cBrown[];
	entry       sSig eEnt;
};

celltype tSingleCellOptimizeCallee {
	entry sSig eEnt;
};

// 呼び側セル 1つ目
cell tSingleCellOptimizeCallee SingleCellOptimizeCallee;

cell tSingleCellOptimizeCaller SingleCellOptimizeCaller {
//	cCall = SingleCellOptimizeCallee.eEnt;
};
// 受け側セル
cell tSingleCellOptimizeCallee SingleCellOptimizeCallee {
};
// 呼び側セル 2つ目
cell tSingleCellOptimizeCaller SingleCellOptimizeCaller2 {
//	cCall = SingleCellOptimizeCallee.eEnt;
};

/*** 2. VMT 不要最適化 ***/
// 受け側のセルが一つだが、受け口配列

celltype tVMTUselessOptimizeCaller {
	[optional]
		call sSig cCall;
	entry sSig eEnt;
};

celltype tVMTUselessOptimizeCallee {
	entry sSig eEnt[2];
	attr {
		int32_t  attribute = 100;
	};
};

// 受け側セル
cell tVMTUselessOptimizeCallee VMTUselessOptimizeCallee;

// 呼び側セル 1つ目
cell tVMTUselessOptimizeCaller VMTUselessOptimizeCaller {
  cCall = VMTUselessOptimizeCallee.eEnt[0];
};
// 呼び側セル 2つ目
cell tVMTUselessOptimizeCaller VMTUselessOptimizeCaller2 {
  cCall = VMTUselessOptimizeCallee.eEnt[1];
};
// 受け側セル
cell tVMTUselessOptimizeCallee VMTUselessOptimizeCallee {
};

/*** VMT 不要最適化&スケルトン不要最適化 ***/
// 受け側のセルが複数だが、単一のセルタイプ

celltype tSkeltonUselessOptimizeCaller {
	[optional]
		call sSig cCall;
	entry sSig eEnt;
};

celltype tSkeltonUselessOptimizeCallee {
  entry sSig eEnt;
  attr {
	  int32_t  attribute = 100;
  };
};

// 受け側セル
cell tSkeltonUselessOptimizeCallee SkeltonUselessOptimizeCallee;
cell tSkeltonUselessOptimizeCallee SkeltonUselessOptimizeCallee2;

// 呼び側セル 1つ目
cell tSkeltonUselessOptimizeCaller SkeltonUselessOptimizeCaller {
  cCall = SkeltonUselessOptimizeCallee.eEnt;
};
// 呼び側セル 2つ目
cell tSkeltonUselessOptimizeCaller SkeltonUselessOptimizeCaller2 {
  cCall = SkeltonUselessOptimizeCallee2.eEnt;
};
// 受け側セル
cell tSkeltonUselessOptimizeCallee SkeltonUselessOptimizeCallee {
};
cell tSkeltonUselessOptimizeCallee SkeltonUselessOptimizeCallee2 {
};

[singleton]
celltype tMain {
	call sSig cMain[];
};
/*cell tMain Main{
	cMain[] = SingleCellOptimizeCaller.eEnt;
	cMain[] = VMTUselessOptimizeCaller.eEnt;
    cMain[] = SkeltonUselessOptimizeCallee.eEnt;
    cMain[] = SkeltonUselessOptimizeCallee2.eEnt;
	};*/

celltype tCPArray {
	[optional]
		call sSig cCall[3];
	entry sSig eEnt;
};
cell tCPArray CPArray1{
};
cell tCPArray CPArray2{
	cCall[0] = SingleCellOptimizeCaller.eEnt;
	cCall[1] = VMTUselessOptimizeCaller.eEnt;
};
cell tCPArray CPArray3{
	cCall[2] = VMTUselessOptimizeCaller.eEnt;
};

celltype tNCPArray {
	[optional]
		call sSig cCall[];    // 呼び口配列要素数未指定
};
cell tNCPArray NCPArray1{
};

cell tNCPArray NCPArray2{
	cCall[] = SingleCellOptimizeCaller.eEnt;
	cCall[] = VMTUselessOptimizeCaller.eEnt;
};

[singleton]
composite tComposite {
	call sSig cMain[];
	[optional]
		call sSig cCall[3];

	cell tMain Main{
//		cMain = composite.cMain;
		cMain => composite.cMain;
	};
	cell tCPArray CPArray {
		cCall => composite.cCall;
	};
};

cell tComposite Comp
{
	cMain[] = SingleCellOptimizeCaller.eEnt;
	cMain[] = VMTUselessOptimizeCaller.eEnt;
    cMain[] = SkeltonUselessOptimizeCallee.eEnt;
    cMain[] = SkeltonUselessOptimizeCallee2.eEnt;
    cMain[] = CPArray1.eEnt;
    cMain[] = CPArray2.eEnt;
    cMain[] = CPArray3.eEnt;
};
